---
import { allCategories } from '@/data/category';
import { getLinksCountForCategory } from '@/lib/link.utils';
const allCategory = {
  name: 'All',
  url: '/',
  isExternal: false,
};
const categories = [allCategory, ...allCategories];
const { activeSidebarId } = Astro.props;
const activeLinkClass = 'bg-background';
const activeTextClass = '!text-primary';
---

<aside
  id="sidebar"
  class="group/sidebar sticky top-16 z-30 w-full shrink-0 overflow-x-scroll border-b border-border bg-body-background md:block md:h-[calc(100vh-4rem)] md:overflow-x-auto md:border-b-0 md:border-r"
>
  <div class="flex size-full flex-row gap-1 px-4 py-2 md:flex-col md:p-2">
    {
      categories.map((category) => {
        const linkCount = getLinksCountForCategory(category.name.toLowerCase());
        return (
          <a
            id={category.name.toLowerCase()}
            href={category.url}
            class="group flex flex-row items-center justify-between rounded-md px-3 py-1.5 transition-all duration-200 md:py-2.5 md:pl-3 md:pr-2"
            data-astro-prefetch
          >
            <span class="sidebar-text line-clamp-1 w-full text-secondary group-hover:text-primary">
              {category.name}
            </span>
            <span class="hidden rounded-md border border-border px-1 text-xs text-secondary opacity-0 transition-all duration-300 group-hover/sidebar:opacity-100 md:block">
              {linkCount}
            </span>
          </a>
        );
      })
    }
  </div>
</aside>

<script
  define:vars={{
    activeSidebarId: activeSidebarId,
    activeLinkClass: activeLinkClass,
    activeTextClass: activeTextClass,
  }}
  is:inline
>
  const activeItemElem = document.getElementById(activeSidebarId);
  activeItemElem && activeItemElem.classList.add(activeLinkClass);

  const activeTextElem = activeItemElem?.querySelector('.sidebar-text');
  activeTextElem && activeTextElem.classList.add(activeTextClass);
</script>
